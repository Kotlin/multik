def cmake_path = "${rootDir}/multik-openblas/multik_jni"
def path_to_build = layout.buildDirectory.dir("cmake-build").get().asFile.absolutePath

String getTargetOSAndArch() {
    String hostOs = System.getProperty('os.name').toLowerCase()
    String hostArch = System.getProperty('os.arch').toLowerCase()
    if (hostOs == "mac os x" && hostArch == "x86_64")
        return 'macosX64'
    else if (hostOs == "mac os x" && hostArch == "aarch64")
        return 'macosArm64'
    else if (hostOs == "linux")
        return 'linuxX64'
    else if (hostOs.startsWith("windows"))
        return 'mingwX64'
    else
        throw GradleException("""
        Failed to detect platform. Please use the following platforms:
            macosX64
            macosArm64
            linuxX64
            mingwX64 (Windows X64 with mingw)
        Or specify explicitly, for example `export androidArm64`
                """)
}

def targetOS = System.getenv("TARGET_OS") ?: getTargetOSAndArch()

def cmake_c_compiler = System.getenv("CMAKE_C_COMPILER") ?: "gcc"
def cmake_cxx_compiler = System.getenv("CMAKE_CXX_COMPILER") ?: "g++"
def lib_gcc_path = System.getenv("GCC_LIB_Path") ?: ""

tasks.register('createBuildDir') {
    doLast {
        mkdir(layout.buildDirectory.get().asFile)
        mkdir(layout.buildDirectory.dir("cmake-build").get().asFile)
    }
}

tasks.register('config_cmake') {
    dependsOn createBuildDir
    doLast {
        exec {
            commandLine "cmake",
                    "-DCMAKE_BUILD_TYPE=Release",
                    "-DCMAKE_C_COMPILER=$cmake_c_compiler",
                    "-DCMAKE_CXX_COMPILER=$cmake_cxx_compiler",
                    "-DGCC_LIB_PATH=$lib_gcc_path",
                    "-DTARGET_OS=$targetOS",
                    "-S", cmake_path,
                    "-B", path_to_build
        }
    }
}

tasks.register('build_cmake') {
    dependsOn config_cmake
    String jProc = Runtime.getRuntime().availableProcessors().toString()
    doLast {
        exec {
            commandLine("cmake", "--build", path_to_build, "--target", "multik_jni-$targetOS", "--", "-j", "$jProc")
        }
        copy {
            from(path_to_build)
            include("*.dylib", "*.so", "*.dll")
            into(layout.buildDirectory.dir("libs").get().asFile)
        }
    }
}