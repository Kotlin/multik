/*
 * Copyright 2020-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */


apply plugin: 'maven-publish'
apply from: project.rootProject.file('gradle/maven-metadata.gradle')

def sonatypeUser = System.getenv('SONATYPE_USER')
def sonatypePassword = System.getenv('SONATYPE_PASSWORD')

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
}

publishing {
    def variantName = "${project.name}"
    publications.all {
        def type = it.name
            switch (type) {
                case 'kotlinMultiplatform':
                    it.artifactId = variantName
                    apply from: "$rootDir/gradle/publish-mpp-root-module-in-platform.gradle"
                    break
                case 'metadata':
                case 'jvm':
                case 'js':
                    it.artifactId = "$variantName-$type"
                    break
            }
            pom.withXml(configureMavenCentralMetadata)
            groupId project.group
            version project.version
        if (name != "kotlinMultiplatform") {
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = sonatypeUser
                password = sonatypePassword
            }
        }
    }
}

def signingKey = System.getenv("SIGN_KEY_ID")
def signingKeyPassphrase = System.getenv("SIGN_KEY_PASSPHRASE")
def signingPrivateKey = System.getenv("SIGN_KEY_PRIVATE")


if (signingKey != null) {
    apply plugin: 'signing'
    signing {
        useInMemoryPgpKeys(signingKey, signingPrivateKey, signingKeyPassphrase)
        sign publishing.publications
    }
}